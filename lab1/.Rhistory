labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
styler:::style_active_file()
z1 <- pgc^4
z2 <- pgc^3 * age
z3 <- pgc^2 * age^2
z4 <- pgc * age^3
z5 <- age^4
y <- diabetes
data$z1 <- pgc^4
data$z2 <- pgc^3 * age
data$z3 <- pgc^2 * age^2
data$z4 <- pgc * age^3
data$z5 <- age^4
y <- diabetes
model <- glm(y ~ pgc + age + z1 + z2 + z3 + z4 + z5,
data = data, family = "binomial")
summary(model)
prediction.basis <- predict(model, data, type = "response")
prediction.basis <- ifelse(prediction > 0.5, 1, 0)
# Confusion Matrix
CM.basis <- table(prediction.basis, y)
misclass <- (1 - sum(diag(CM.basis)) / length(prediction.basis))
misclass
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
misclass.basis
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction.basis))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction.basis))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
# Plot
ggplot(data, aes(x = age, y = pgc, color = as.factor(diabetes))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration", color = "Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
# Plot
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction.1))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
# plot including boundary line
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
geom_abline(slope = coef(logistic.model)[["age"]] /
(-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] /
(-coef(logistic.model)[["pgc"]]), color = "darkslategrey") +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
# plot including boundary line
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
geom_abline(slope = coef(logistic.model)[["age"]] /
(-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] /
(-coef(logistic.model)[["pgc"]]), color = "darkslategrey") +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
geom_abline(slope = coef(logistic.model)[["age"]] /
(-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] /
(-coef(logistic.model)[["pgc"]]), color = "darkslategrey") +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
geom_abline(slope = coef(logistic.model)[["age"]] /
(-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] /
(-coef(logistic.model)[["pgc"]]), color = "darkslategrey") +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
rlang::last_error()
# plot with treshold r = 0.2
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction.2))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
# plot with treshold r = 0.8
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction.3))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
# Plot prediction with basis function expansion
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction.basis))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
# plot including boundary line
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
geom_abline(slope = coef(logistic.model)[["age"]] /
(-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] /
(-coef(logistic.model)[["pgc"]]), color = "black") +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
# plot including boundary line
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
geom_abline(slope = coef(logistic.model)[["age"]] /
(-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] /
(-coef(logistic.model)[["pgc"]]), color = "black") +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
# plot including boundary line
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
geom_abline(slope = coef(logistic.model)[["age"]] / (-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] / (-coef(logistic.model)[["pgc"]]), color = "darkslategrey") +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
# plot including boundary line
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
geom_abline(slope = coef(logistic.model)[["age"]] / (-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] / (-coef(logistic.model)[["pgc"]]), color = "darkslategrey") +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2", ...))
# plot including boundary line
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
geom_abline(slope = coef(logistic.model)[["age"]] / (-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] / (-coef(logistic.model)[["pgc"]]), color = "darkslategrey") +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
# plot including boundary line
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
geom_abline(slope = coef(logistic.model)[["age"]] / (-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] / (-coef(logistic.model)[["pgc"]]), color = "darkslategrey") +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2", "darkslategrey"))
# plot including boundary line
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
scale_color_manual(values = c("black", "deepskyblue2")) +
geom_abline(slope = coef(logistic.model)[["age"]] / (-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] / (-coef(logistic.model)[["pgc"]]), color = "darkslategrey") +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes")
# plot including boundary line
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
scale_color_manual(values = c("black", "deepskyblue2")) +
geom_abline(slope = coef(logistic.model)[["age"]] / (-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] / (-coef(logistic.model)[["pgc"]]), color = "darkslategrey") +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes")
library(ggplot2)
# plot including boundary line
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
scale_color_manual(values = c("black", "deepskyblue2")) +
geom_abline(slope = coef(logistic.model)[["age"]] / (-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] / (-coef(logistic.model)[["pgc"]]), color = "darkslategrey") +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes")
# plot including boundary line
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
scale_color_manual(values = c("black", "deepskyblue2")) +
geom_abline(slope = coef(logistic.model)[["age"]]
/ (-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]]
/ (-coef(logistic.model)[["pgc"]]), color = "darkslategrey") +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes")
# plot including boundary line
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction.1))) +
geom_point() +
scale_color_manual(values = c("black", "deepskyblue2")) +
geom_abline(slope = coef(logistic.model)[["age"]]
/ (-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]]
/ (-coef(logistic.model)[["pgc"]]), color = "darkslategrey") +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes")
misclass <- (1 - sum(diag(CM)) / length(prediction)) # 0.2552083
misclass
misclass <- (1 - sum(diag(CM)) / length(prediction.1)) # 0.2552083
misclass
# Confusion matrix
CM <- table(prediction.1, diabetes)
misclass <- (1 - sum(diag(CM)) / length(prediction.1)) # 0.2552083
misclass
misclass
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
misclass
# Read data
data <- read.csv("data/pima-indians-diabetes.csv")
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
# Confusion matrix
CM <- table(prediction.1, diabetes)
Cm
CM
# Confusion matrix
CM <- table(prediction.1, diabetes)
misclass <- (1 - sum(diag(CM)) / length(prediction.1)) # 0.2552083
misclass
misclass.basis
CM.basis
install.packages("lintr")
lintr:::addin_lint()
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
ggplot(data, aes(x = age, y = pgc, color = as.factor(diabetes))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration", color = "Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
misclass
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction_1))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction_1))) +
geom_point() +
scale_color_manual(values = c("black", "deepskyblue2")) +
geom_abline(slope = coef(logistic.model)[["age"]]
/ (-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]]
/ (-coef(logistic.model)[["pgc"]]), color = "darkslategrey") +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes")
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction_2))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction_3))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction_basis))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
lintr:::addin_lint()
lintr:::addin_lint()
styler:::set_style_transformers()
lintr:::addin_lint()
lintr:::addin_lint()
source("~/Desktop/Git/tdde01/lab1/assignment1.R")
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
styler:::style_active_file()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
# read data
data <- read.csv("data/optdigits.csv")
# Splitting dataset into train(50%), validation(25%) and test data(25%).
# set.seed is used to ensure the same results every time.
n <- dim(data)[1]
set.seed(12345)
id <- sample(1:n, floor(n * 0.5))
data_train <- data[id, ]
id1 <- setdiff(1:n, id)
set.seed(12345)
id2 <- sample(id1, floor(n * 0.25))
data_valid <- data[id2, ]
id3 <- setdiff(id1, id2)
data_test <- data[id3, ]
data_train$X0.26 <- as.factor(data_train$X0.26)
data_test$X0.26 <- as.factor(data_test$X0.26)
library(kknn)
# Using data to fit 30-nearest neighbor on train and test data.
model_train <- kknn(X0.26 ~ ., train = data_train, test = data_train, k = 30,
kernel = "rectangular")
model_test <- kknn(X0.26 ~ ., train = data_train, test = data_test, k = 30,
kernel = "rectangular")
prediction_train <- predict(model_train)
prediction_test <- predict(model_test)
# Confusion matrices
cm_train <- table(prediction_train, data_train$X0.26)
cm_test <- table(prediction_test, data_test$X0.26)
# function to compute missclassification rate.
misclass <- function(x, x1) {
n <- length(x)
return(1 - sum(diag(table(x, x1))) / n)
}
# Computing misclassification rates from confusion matrices.
misclass_train <- misclass(prediction_train, data_train$X0.26)
misclass_test <- misclass(prediction_test, data_test$X0.26)
# Combining dataset of 8s in the training data and the probability of
# being an 8 in the kknn prob table.
train8 <- data_train[data_train$X0.26 == "8", ]
prob8 <- model_train[["prob"]][data_train$X0.26 == "8", ]
# Find index of the 3 hardest and the 2 easiest 8s to classify.
prob8_hardest <- sort(prob8[, "8"], decreasing = FALSE,
index.return = TRUE)$ix[1:3]
prob8_easiest <- sort(prob8[, "8"], decreasing = TRUE,
index.return = TRUE)$ix[1:2]
# Remove last column and reshape into 8x8 numeric matrix.
prob8_hardest_1 <- matrix(as.numeric(train8[prob8_hardest[1], ][-65]),
nrow = 8, ncol = 8)
prob8_hardest_2 <- matrix(as.numeric(train8[prob8_hardest[2], ][-65]),
nrow = 8, ncol = 8)
prob8_hardest_3 <- matrix(as.numeric(train8[prob8_hardest[3], ][-65]),
nrow = 8, ncol = 8)
# Visualize
heatmap(t(prob8_hardest_1), Colv = "Rowv", Rowv = NA)
heatmap(t(prob8_hardest_2), Colv = "Rowv", Rowv = NA)
heatmap(t(prob8_hardest_3), Colv = "Rowv", Rowv = NA)
# Remove last column and reshape into 8x8 numeric matrix.
prob8_easiest_1 <- matrix(as.numeric(train8[prob8_easiest[1], ][-65]),
nrow = 8, ncol = 8)
prob8_easiest_2 <- matrix(as.numeric(train8[prob8_easiest[2], ][-65]),
nrow = 8, ncol = 8)
# Visualize
heatmap(t(prob8_easiest_1), Colv = "Rowv", Rowv = NA)
heatmap(t(prob8_easiest_2), Colv = "Rowv", Rowv = NA)
multi_misclass_train <- c()
multi_misclass_valid <- c()
for (x in 1:30) {
model_train_temp <- kknn(X0.26 ~ ., train = data_train, test = data_train,
k = x, kernel = "rectangular")
prediction_train_temp <- predict(model_train_temp)
multi_misclass_train <- append(
multi_misclass_train,
misclass(prediction_train_temp, data_train$X0.26))
model_valid_temp <- kknn(X0.26 ~ ., train = data_train, test = data_valid,
k = x, kernel = "rectangular")
prediction_valid_temp <- predict(model_valid_temp)
multi_misclass_valid <- append(
multi_misclass_valid,
misclass(prediction_valid_temp, data_valid$X0.26))
}
best_k <- which_min(multi_misclass_valid)
for (x in 1:30) {
model_train_temp <- kknn(X0.26 ~ ., train = data_train, test = data_train,
k = x, kernel = "rectangular")
prediction_train_temp <- predict(model_train_temp)
multi_misclass_train <- append(
multi_misclass_train,
misclass(prediction_train_temp, data_train$X0.26))
model_valid_temp <- kknn(X0.26 ~ ., train = data_train, test = data_valid,
k = x, kernel = "rectangular")
prediction_valid_temp <- predict(model_valid_temp)
multi_misclass_valid <- append(
multi_misclass_valid,
misclass(prediction_valid_temp, data_valid$X0.26))
}
best_k <- which.min(multi_misclass_valid)
best_k_model <- kknn(X0.26 ~ ., train = data_train, test = data_test,
k = best_k, kernel = "rectangular")
best_k_model_prediction <- best_k_model$fitted.values
best_k_misclass <- misclass(best_k_model_prediction, data_test$X0.26)
plot(multi_misclass_train * 100, col = "blue", ylim = c(0, 6),
xlab = "K-nearest neighbors", ylab = "Misclassification rate in %",
pch = 20)
points(multi_misclass_valid * 100, col = "green", pch = 20)
points(7, best_k_misclass * 100, col = "red", pch = 20)
mtext("Difference in misclassification
dependent on number of neighbours in KNN")
legend("topleft", c("misclass. training data", "misclass. validation data",
"missclass. test data with optimal K value"),
fill = c("blue", "green", "red"))
plot(multi_misclass_train * 100, col = "blue", ylim = c(0, 6),
xlab = "K-nearest neighbors", ylab = "Misclassification rate in %",
pch = 20)
plot(multi_misclass_train * 100, col = "blue", ylim = c(0, 6),
xlab = "K-nearest neighbors", ylab = "Misclassification rate in %",
pch = 20)
points(multi_misclass_valid * 100, col = "green", pch = 20)
source("~/Desktop/Git/tdde01/lab1/assignment_1.R")
styler:::style_active_file()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
source("~/Desktop/Git/tdde01/lab1/assigment_2.R")
source("~/Desktop/Git/tdde01/lab1/assigment_2.R")
source("~/Desktop/Git/tdde01/lab1/assigment_2.R")
df_1
df_100
df_1000
mse_train_opt_1000
mse_test_opt_1000
lintr:::addin_lint()
source("~/Desktop/Git/tdde01/lab1/assigment_2.R")
mse_train_opt_1
mse_train_opt_1000
source("~/Desktop/Git/TDDE01/lab1/assignment_3.R")
source("~/Desktop/Git/TDDE01/lab1/assignment_3.R")
source("~/Desktop/Git/TDDE01/lab1/assignment_3.R")
source("~/Desktop/Git/TDDE01/lab1/assignment_3.R")
source("~/Desktop/Git/TDDE01/lab1/assignment_3.R")
source("~/Desktop/Git/TDDE01/lab1/assignment_3.R")
# Read data
data <- read.csv("data/pima-indians-diabetes.csv", header = FALSE)
library(ggplot2)
# extracting Plasma glucose concentration, age and diabetes from data
pgc <- data$V2
age <- data$V8
diabetes <- data$V9
# Plot
ggplot(data, aes(x = age, y = pgc, color = as.factor(diabetes))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration", color = "Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
logistic_model <- glm(diabetes ~ pgc + age, data = data, family = "binomial")
summary(logistic_model)
prediction <- predict(logistic_model, data, type = "response")
prediction_1 <- ifelse(prediction > 0.5, 1, 0)
# Confusion matrix
cm <- table(prediction_1, diabetes)
misclass <- (1 - sum(diag(cm)) / length(prediction_1)) # 0.2552083 or 0.2630208?
# Plot
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction_1))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
# plot including boundary line
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction_1))) +
geom_point() +
scale_color_manual(values = c("black", "deepskyblue2")) +
geom_abline(slope = coef(logistic_model)[["age"]]
/ (-coef(logistic_model)[["pgc"]]),
intercept = coef(logistic_model)[["(Intercept)"]]
/ (-coef(logistic_model)[["pgc"]]), color = "darkslategrey") +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes")
prediction_2 <- ifelse(prediction > 0.2, 1, 0)
prediction_3 <- ifelse(prediction > 0.8, 1, 0)
# plot with treshold r = 0.2
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction_2))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
# plot with treshold r = 0.8
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction_3))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
data$z1 <- pgc^4
data$z2 <- pgc^3 * age
data$z3 <- pgc^2 * age^2
data$z4 <- pgc * age^3
data$z5 <- age^4
y <- diabetes
model <- glm(y ~ pgc + age + z1 + z2 + z3 + z4 + z5,
data = data, family = "binomial")
summary(model)
prediction_basis <- predict(model, data, type = "response")
prediction_basis <- ifelse(prediction_basis > 0.5, 1, 0)
# Confusion Matrix
cm_basis <- table(prediction_basis, y)
misclass_basis <- (1 - sum(diag(cm_basis)) / length(prediction_basis)) # 0.2447917
# Plot prediction with basis function expansion
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction_basis))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
source("~/Desktop/Git/TDDE01/lab1/assignment_1.R")
source("~/Desktop/Git/TDDE01/lab1/assigment_2.R")
source("~/Desktop/Git/TDDE01/lab1/assigment_2.R")
mse_test_opt_1000
source("~/Desktop/Git/TDDE01/lab1/assigment_2.R")
