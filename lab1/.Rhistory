geom_point() +
labs(y = "Plasma glucose concentration", color = "Diabetes")
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
ggplot(data, aes(x = age, y = pgc, color = as.factor(diabetes))) +
geom_point() +
labs(y = "Plasma glucose concentration", color = "Diabetes") +
scale_color_manual(values = c("black", "lightblue"))
ggplot(data, aes(x = age, y = pgc, color = as.factor(diabetes))) +
geom_point() +
labs(y = "Plasma glucose concentration", color = "Diabetes") +
scale_color_manual(values = c("black", "teal"))
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
ggplot(data, aes(x = age, y = pgc, color = as.factor(diabetes))) +
geom_point() +
labs(y = "Plasma glucose concentration", color = "Diabetes") +
scale_color_manual(values = c("black", "teal"))
ggplot(data, aes(x = age, y = pgc, color = as.factor(diabetes))) +
geom_point() +
labs(y = "Plasma glucose concentration", color = "Diabetes") +
scale_color_manual(values = c("black", "deepskyblue"))
ggplot(data, aes(x = age, y = pgc, color = as.factor(diabetes))) +
geom_point() +
labs(y = "Plasma glucose concentration", color = "Diabetes") +
scale_color_manual(values = c("black", "deepskyblue4"))
ggplot(data, aes(x = age, y = pgc, color = as.factor(diabetes))) +
geom_point() +
labs(y = "Plasma glucose concentration", color = "Diabetes") +
scale_color_manual(values = c("black", "deepskyblue1"))
styler:::style_active_file()
styler:::style_active_file()
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
ggplot(data, aes(x = age, y = pgc, color = as.factor(diabetes))) +
geom_point() +
labs(y = "Plasma glucose concentration", color = "Diabetes") +
scale_color_manual(values = c("black", "blue"))
ggplot(data, aes(x = age, y = pgc, color = as.factor(diabetes))) +
geom_point() +
labs(y = "Plasma glucose concentration", color = "Diabetes") +
scale_color_manual(values = c("black", "deepskyblue1"))
ggplot(data, aes(x = age, y = pgc, color = as.factor(diabetes))) +
geom_point() +
labs(y = "Plasma glucose concentration", color = "Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
ggplot(data, aes(x = age, y = pgc, color = as.factor(diabetes))) +
geom_point() +
labs(y = "Plasma glucose concentration", color = "Diabetes") +
scale_color_manual(values = c("black", "deepskyblue4"))
ggplot(data, aes(x = age, y = pgc, color = as.factor(diabetes))) +
geom_point() +
labs(y = "Plasma glucose concentration", color = "Diabetes") +
scale_color_manual(values = c("black", "deepskyblue1"))
ggplot(data, aes(x = age, y = pgc, color = as.factor(diabetes))) +
geom_point() +
labs(y = "Plasma glucose concentration", color = "Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
?glm
ggplot(data, aes(x = age, y = pgc, color = as.factor(diabetes))) +
geom_smooth() +
labs(y = "Plasma glucose concentration", color = "Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
ggplot(data, aes(x = age, y = pgc, color = as.factor(diabetes))) +
geom_point() +
labs(y = "Plasma glucose concentration", color = "Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
?glm
logistic.model <- glm(diabetes ~ pgc + age, data = data, family = "binomial")
logistic.model
summary(logistic.model)
ggplot(data, aes(x = age, y = pgc, color = as.factor(diabetes))) +
geom_point() +
labs(x = "Age", y = "Plasma glucose concentration", color = "Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
prediction <- predict(logistic.model, data, type="response")
predicttion
prediction
as.matrix(prediction)
prediction <- ifelse(prediciton > 0.5, 1, 0)
prediction <- ifelse(prediciton > 0.5, 1, 0)
summary(logistic.model)
source("~/Desktop/Git/tdde01/lab1/assignment_1.R")
# Visualize
heatmap(t(prob8.hardest.1), Colv = "Rowv", Rowv = NA)
heatmap(t(prob8.hardest.2), Colv = "Rowv", Rowv = NA)
heatmap(t(prob8.hardest.3), Colv = "Rowv", Rowv = NA)
# Visualize
heatmap(t(prob8.easiest.1), Colv = "Rowv", Rowv = NA)
heatmap(t(prob8.easiest.2), Colv = "Rowv", Rowv = NA)
# Confusion matrix
CM <- table(prediction, diabetes)
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
prediction <- ifelse(prediciton > 0.5, 1, 0)
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
# Confusion matrix
CM <- table(prediction, diabetes)
CM
misclass <- (1 - sum(diag(CM))/dim(CM))
misclass
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
misclass
misclass <- (1 - sum(diag(CM))/length(CM))
misclass
misclass <- (1 - sum(diag(CM))/length(prediction))
misclass
prediction <- predict(logistic.model, data)
as.matrix(prediction)
prediction <- ifelse(prediction > 0.5, 1, 0)
# Confusion matrix
CM <- table(prediction, diabetes)
misclass <- (1 - sum(diag(CM))/length(prediction))
# Confusion matrix
CM <- table(prediction, diabetes)
misclass <- (1 - sum(diag(CM))/length(prediction))
misclass
# Read data
data <- read.csv("data/pima-indians-diabetes.csv", header = FALSE)
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
# Read data
data <- read.csv("data/pima-indians-diabetes.csv", header = FALSE)
View(data)
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
misclass
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
# Plot
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration", color = "predicted Diabetes") +
scale_color_manual(values = c("black", "darkseagreen3"))
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration", color = "predicted Diabetes") +
scale_color_manual(values = c("black", "darkseagreen3"))
theta.opt.1 <- RidgeOpt(lambda = 1)
source("~/Desktop/Git/tdde01/lab1/assigment_2.R")
theta.opt.1 <- RidgeOpt(lambda = 1)
theta.opt.100 <- RidgeOpt(lambda = 100)
theta.opt.1000 <- RidgeOpt(lambda = 1000)
View(theta.opt.1)
View(theta.opt.100)
View(theta.opt.1000)
theta.opt.1
as.matrix(theta.opt.1)
as.matrix(theta.opt.1$par)
as.matrix(theta.opt.1$par[-17])
pred.test.opt.1000
theta.opt.1 <- RidgeOpt(lambda = 1)
mse.train.opt.1
mse.test.opt.100
df.1
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
geom_line(data = logistic.model) +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "darkseagreen3"))
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "darkseagreen3")) +
geom_line(data = logistic.model)
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "darkseagreen3")) +
geom_line(data = logistic.model)
# Plot of task 2 including curve from task 3.
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "darkseagreen3")) +
geom_smooth(method = "lm")
source("~/Desktop/Git/tdde01/lab1/assignment_3.R", echo=TRUE)
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "darkseagreen3"))
summary(logistic.model)
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "darkseagreen3")) +
geom_abline(slope = coef(logistic.model)[["pgc"]]/(-coef(logistic.model)[["age"]]),
intercept = coef(logistic.model)[["(Intercept)"]]/(-coef(logistic.model)[["age"]]))
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "darkseagreen3")) +
geom_abline(slope = coef(logistic.model)[["age"]]/(-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]]/(-coef(logistic.model)[["pgc"]]))
styler:::style_active_file()
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
# Plot of task 2 including curve from task 3.
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
geom_abline(
slope = coef(logistic.model)[["age"]] / (-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] / (-coef(logistic.model)[["pgc"]])
) +
labs(
x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes"
) +
scale_color_manual(values = c("black", "darkseagreen3", "blue"))
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
# Plot of task 2 including curve from task 3.
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
geom_abline(
slope = coef(logistic.model)[["age"]] / (-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] / (-coef(logistic.model)[["pgc"]])
) +
labs(
x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes"
) +
scale_color_manual(values = c("black", "darkseagreen3"))
# Plot of task 2 including curve from task 3.
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
geom_abline(
slope = coef(logistic.model)[["age"]] / (-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] / (-coef(logistic.model)[["pgc"]])
) +
labs(
x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes"
) +
scale_color_manual(values = c("black", "darkseagreen3"))
# Plot of task 2 including curve from task 3.
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
geom_abline(
slope = coef(logistic.model)[["age"]] / (-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] / (-coef(logistic.model)[["pgc"]])
color = "blue") +
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
# Plot of task 2 including curve from task 3.
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
geom_abline(
slope = coef(logistic.model)[["age"]] / (-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] / (-coef(logistic.model)[["pgc"]]),
color = "blue") +
labs(
x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes"
) +
scale_color_manual(values = c("black", "darkseagreen3"))
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
# Plot of task 2 including curve from task 3.
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
geom_abline(slope = coef(logistic.model)[["age"]] /
(-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] /
(-coef(logistic.model)[["pgc"]]), color = "darkslategrey") +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "darkseagreen3"))
ggplot(data, aes(x = age, y = pgc, color = as.factor(diabetes))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration", color = "Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
geom_abline(slope = coef(logistic.model)[["age"]] /
(-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] /
(-coef(logistic.model)[["pgc"]]), color = "darkslategrey") +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "darkseagreen3"))
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
geom_abline(slope = coef(logistic.model)[["age"]] /
(-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] /
(-coef(logistic.model)[["pgc"]]), color = "darkslategrey") +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction.1))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction.1))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
prediction.1 <- ifelse(prediction > 0.2, 1, 0)
prediction.2 <- ifelse(prediction > 0.8, 1, 0)
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction.1))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction.2))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
# plot with treshold r = 0.2
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction.2))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
# plot with treshold r = 0.8
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction.3))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
styler:::style_active_file()
z1 <- pgc^4
z2 <- pgc^3 * age
z3 <- pgc^2 * age^2
z4 <- pgc * age^3
z5 <- age^4
y <- diabetes
data$z1 <- pgc^4
data$z2 <- pgc^3 * age
data$z3 <- pgc^2 * age^2
data$z4 <- pgc * age^3
data$z5 <- age^4
y <- diabetes
model <- glm(y ~ pgc + age + z1 + z2 + z3 + z4 + z5,
data = data, family = "binomial")
summary(model)
prediction.basis <- predict(model, data, type = "response")
prediction.basis <- ifelse(prediction > 0.5, 1, 0)
# Confusion Matrix
CM.basis <- table(prediction.basis, y)
misclass <- (1 - sum(diag(CM.basis)) / length(prediction.basis))
misclass
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
misclass.basis
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction.basis))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction.basis))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
# Plot
ggplot(data, aes(x = age, y = pgc, color = as.factor(diabetes))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration", color = "Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
# Plot
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction.1))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
# plot including boundary line
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
geom_abline(slope = coef(logistic.model)[["age"]] /
(-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] /
(-coef(logistic.model)[["pgc"]]), color = "darkslategrey") +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
# plot including boundary line
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
geom_abline(slope = coef(logistic.model)[["age"]] /
(-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] /
(-coef(logistic.model)[["pgc"]]), color = "darkslategrey") +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
geom_abline(slope = coef(logistic.model)[["age"]] /
(-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] /
(-coef(logistic.model)[["pgc"]]), color = "darkslategrey") +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
source("~/Desktop/Git/tdde01/lab1/assignment_3.R")
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
geom_abline(slope = coef(logistic.model)[["age"]] /
(-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] /
(-coef(logistic.model)[["pgc"]]), color = "darkslategrey") +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
rlang::last_error()
# plot with treshold r = 0.2
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction.2))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
# plot with treshold r = 0.8
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction.3))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
# Plot prediction with basis function expansion
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction.basis))) +
geom_point() +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
# plot including boundary line
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
geom_abline(slope = coef(logistic.model)[["age"]] /
(-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] /
(-coef(logistic.model)[["pgc"]]), color = "black") +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
# plot including boundary line
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
geom_abline(slope = coef(logistic.model)[["age"]] /
(-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] /
(-coef(logistic.model)[["pgc"]]), color = "black") +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
# plot including boundary line
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
geom_abline(slope = coef(logistic.model)[["age"]] / (-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] / (-coef(logistic.model)[["pgc"]]), color = "darkslategrey") +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
# plot including boundary line
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
geom_abline(slope = coef(logistic.model)[["age"]] / (-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] / (-coef(logistic.model)[["pgc"]]), color = "darkslategrey") +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2", ...))
# plot including boundary line
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
geom_abline(slope = coef(logistic.model)[["age"]] / (-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] / (-coef(logistic.model)[["pgc"]]), color = "darkslategrey") +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2"))
# plot including boundary line
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
geom_abline(slope = coef(logistic.model)[["age"]] / (-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] / (-coef(logistic.model)[["pgc"]]), color = "darkslategrey") +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes") +
scale_color_manual(values = c("black", "deepskyblue2", "darkslategrey"))
# plot including boundary line
ggplot(data, aes(x = age, y = pgc, color = as.factor(prediction))) +
geom_point() +
scale_color_manual(values = c("black", "deepskyblue2")) +
geom_abline(slope = coef(logistic.model)[["age"]] / (-coef(logistic.model)[["pgc"]]),
intercept = coef(logistic.model)[["(Intercept)"]] / (-coef(logistic.model)[["pgc"]]), color = "darkslategrey") +
labs(x = "Age", y = "Plasma Glucose Concentration",
color = "Predicted Diabetes")
