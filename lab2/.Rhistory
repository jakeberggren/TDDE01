data <- data%>%select(-duration)
data <- read.csv("data/bank-full.csv")
View(data)
data <- data%>%select(-.duration)
View(data)
library(tidyr)
########### Libraries #############
library(dplyr)
library(tidyr)
library(tree)
View(data)
data <- data%>%separate(age, job, maritial, education, default, balance,
housing, loan, contact, day, month, duration,
campaign, pdays, previous, poutcome, y)
data <- data %>% separate(data, c("age", "job", "maritial", "education", "default", "balance",
"housing", "loan", "contact", "day", "month", "duration",
"campaign", "pdays", "previous", "poutcome", "y"), ";")
data <- data %>% separate(data, c(age, job, maritial, education, default, balance,
housing, loan, contact, day, month, duration,
campaign, pdays, previous, poutcome, y), ";")
source("~/Desktop/Git/tdde01/lab2/assigment_2.R", echo=TRUE)
data <- data %>% separate(c("age", "job", "maritial", "education", "default", "balance",
"housing", "loan", "contact", "day", "month", "duration",
"campaign", "pdays", "previous", "poutcome", "y"), ";")
library(stringr)
data <- str_split_fixed(data, ";", 17)
View(data)
data <- read.csv("data/bank-full.csv")
data <- str_split_fixed(data$age.job.marital.education.default.balance.housing.loan.contact.day.month.duration.campaign.pdays.previous.poutcome.yÃŸ, ";", 17)
View(data)
data <- read.csv("data/bank-full.csv")
View(data)
view(test)
View(test)
View(data)
data <- read.csv("data/bank-full.csv", delimiter = ";")
data <- read.csv("data/bank-full.csv", delimiter = ";")
?read.csv
data <- read.csv("data/bank-full.csv", sep = ";")
View(data)
data <- data %>% select(-.duration)
data <- data %>% select(-duration)
View(data)
data <- read.csv("data/bank-full.csv", sep = ";", header = FALSE)
data <- data %>% select(-duration)
View(data)
data <- read.csv("data/bank-full.csv", sep = ";")
data <- data %>% select(-duration)
data <- read.csv("data/bank-full.csv", sep = ";")
data <- data %>% select(-duration)
# data partition
n <- dim(data)[1]
set.seed(12345)
id <- sample(1:n, floor(n * 0.4))
train <- data[id, ]
id1 <- setdiff(1:n, id)
set.seed(12345)
id2 <- sample(id1, floor(n * 0.3))
valid <- data[id2, ]
id3 <- setdiff(id1, id2)
test <- data[id3, ]
source("~/Desktop/Git/tdde01/lab2/assigment_2.R")
View(data)
View(data)
# a. Decision tree with default settings
n <- dim(data)[1]
# a. Decision tree with default settings
tree_a <- tree(y~., data = train)
plot(tree_a)
source("~/Desktop/Git/tdde01/lab2/assigment_2.R")
data <- read.csv("data/bank-full.csv", sep = ";")
View(data)
data <- read.csv("data/bank-full.csv", sep = ";", header = FALSE)
data <- data %>% select(-duration)
data <- data %>% select(-V12)
data <- read.csv("data/bank-full.csv", sep = ";", header = FALSE)
data <- data %>% select(-V12)
# a. Decision tree with default settings
tree_a <- tree(V17~., data = train)
source("~/Desktop/Git/tdde01/lab2/assigment_2.R")
# a. Decision tree with default settings
tree_a <- tree(V17~., data = train)
plot(tree_a)
# a. Decision tree with default settings
tree_a <- tree(as.factor(V17)~., data = train)
plot(tree_a)
data <- data %>% select(-decision)
data <- read.csv("data/bank-full.csv", sep = ";")
source("~/Desktop/Git/tdde01/lab2/assigment_2.R")
source("~/Desktop/Git/tdde01/lab2/assigment_2.R")
source("~/Desktop/Git/tdde01/lab2/assigment_2.R")
source("~/Desktop/Git/tdde01/lab2/assigment_2.R")
source("~/Desktop/Git/tdde01/lab2/assigment_2.R")
source("~/Desktop/Git/tdde01/lab2/assigment_2.R")
source("~/Desktop/Git/tdde01/lab2/assigment_2.R")
source("~/Desktop/Git/tdde01/lab2/assigment_2.R")
source("~/Desktop/Git/tdde01/lab2/assigment_2.R")
source("~/Desktop/Git/tdde01/lab2/assigment_2.R")
as.factor(y)
as.factor(data$y)
View(train)
# a. Decision tree with default settings
tree_a <- tree(as.factor(y)~., data = train)
# a. Decision tree with default settings
tree_a <- tree(y~., data = train)
plot(tree_a)
source("~/Desktop/Git/tdde01/lab2/assigment_2.R")
# a. Decision tree with default settings
train$y <- as.factor(train$y)
tree_a <- tree(y~., data = train)
View(tree_a)
plot(tree_a)
View(train)
tree_a <- tree(y~., data = train)
source("~/Desktop/Git/tdde01/lab2/assigment_2.R")
data <- read.csv("data/bank-full.csv", sep = ";")
data <- data %>% select(-duration)
data <- as.factor(data)
data <- read.csv("data/bank-full.csv", sep = ";")
data <- data %>% select(-duration)
View(data)
?read.csv
source("~/Desktop/Git/github/tdde01/lab2/assigment_2.R")
data <- read.csv("data/bank-full.csv", sep = ";", stringsAsFactors = TRUE)
data <- data %>% select(-duration)
data$
# data partition
n <- dim(data)[1]
data <- read.csv("data/bank-full.csv", sep = ";", stringsAsFactors = TRUE)
data <- data %>% select(-duration)
# data partition
n <- dim(data)[1]
set.seed(12345)
id <- sample(1:n, floor(n * 0.4))
train <- data[id, ]
id1 <- setdiff(1:n, id)
set.seed(12345)
id2 <- sample(id1, floor(n * 0.3))
valid <- data[id2, ]
id3 <- setdiff(id1, id2)
test <- data[id3, ]
# a. Decision tree with default settings
tree_a <- tree(as.factor(y)~., data = train)
plot(tree_a)
View(train)
data <- read.csv("data/bank-full.csv", sep = ";", stringsAsFactors = TRUE)
data <- data %>% select(-duration)
# data partition
n <- dim(data)[1]
set.seed(12345)
id <- sample(1:n, floor(n * 0.4))
train <- data[id, ]
id1 <- setdiff(1:n, id)
set.seed(12345)
id2 <- sample(id1, floor(n * 0.3))
valid <- data[id2, ]
id3 <- setdiff(id1, id2)
test <- data[id3, ]
# a. Decision tree with default settings
tree_a <- tree(y~., data = train)
plot(tree_a)
source("~/Desktop/Git/github/tdde01/lab2/assigment_2.R")
source("~/Desktop/Git/github/tdde01/lab2/assigment_2.R")
summary(tree_a)
?read.csv2
styler:::style_active_file()
lintr:::addin_lint()
styler:::style_active_file()
summary(tree_a)
plot(tree_a)
summary(tree_a)
summary(tree_a)
styler:::style_selection()
styler:::style_active_file()
source("~/Desktop/Git/github/tdde01/lab2/assigment_2.R")
summar(tree_b)
summary(tree_b)
summary(tree_a)
plot(tree_b)
plot(tree_a)
plot(tree_b)
# b. Decision tree with smallest allowed node size equal to 7000.
tree_b <- tree(y ~ ., data = train,
control = tree.control(nrow(train), minsize = 40))
summary(tree_b)
plot(tree_b)
# b. Decision tree with smallest allowed node size equal to 7000.
tree_b <- tree(y ~ ., data = train,
control = tree.control(nrow(train), minsize = 7000))
summary(tree_b)
plot(tree_b)
?tree
summary(tree_a) # misclassification
summary(tree_b) #
tree_a
summary(tree_a)
?tree.control
tree_c <- tree(y ~ ., data = train, control = tree.control(mindev = 0.0005))
tree_c <- tree(y ~ ., data = train,
control = tree.control(nrow(train), mindev = 0.0005))
tree_c
summary(tree_c)
plot(tree_c)
# Predictions on validation set
pred_a <- predict(tree_a, newdata = valid, type = "class")
# Predictions on validation set
pred_a <- predict(tree_a, newdata = valid, type = "class")
pred_b <- predict(tree_b, newdata = valid, type = "class")
pred_c <- predict(tree_c, newdata = valid, type = "class")
# Predictions on validation set
pred_a <- predict(tree_a, newdata = valid)
# Summaries to report misclassification rate for trees on train set.
summary(tree_a)
summary(tree_b)
summary(tree_c)
# Summaries to report misclassification rate for trees on train set.
summary(tree_a)
summary(tree_b)
summary(tree_c) # Misclassification error rate: 0.1048
source("~/Desktop/Git/github/tdde01/lab2/assigment_2.R")
# Calculating misclassification rate for validation data
misclass_valid_a <- 1-sum(diag(table(pred_a, valid$y)))/length(pred_a)
misclass_valid_b <- 1-sum(diag(table(pred_b, valid$y)))/length(pred_b)
misclass_valid_b <- 1-sum(diag(table(pred_c, valid$y)))/length(pred_c)
source("~/Desktop/Git/github/tdde01/lab2/assigment_2.R")
# Calculating misclassification rate for validation data
misclass_valid_a <- 1-sum(diag(table(pred_a, valid$y)))/length(pred_a)
misclass_valid_b <- 1-sum(diag(table(pred_b, valid$y)))/length(pred_b)
misclass_valid_b <- 1-sum(diag(table(pred_c, valid$y)))/length(pred_c)
misclass_valid_c <- 1-sum(diag(table(pred_c, valid$y)))/length(pred_c)
validation_misclass <- as.data.frame(misclass_valid_a,
misclass_valid_b,
misclass_valid_c)
source("~/Desktop/Git/github/tdde01/lab2/assigment_2.R")
misclass_valid_a
misclass_valid_b
misclass_valid_c
validation_misclass <- as.data.frame(misclass_valid_a,
misclass_valid_b,
misclass_valid_c, row.names = a, b, c)
?as.data.frame
validation_misclass <- as.data.frame(misclass_valid_a,
misclass_valid_b,
misclass_valid_c, row.names = c(a, b, c))
validation_misclass <- as.data.frame(misclass_valid_a,
misclass_valid_b,
misclass_valid_c, row.names = c("a", "b", "c"))
validation_misclass <- as.data.frame(misclass_valid_a,
misclass_valid_b,
misclass_valid_c)
validation_misclass <- as.data.frame(c(misclass_valid_a,
misclass_valid_b,
misclass_valid_c))
validation_misclass
validation_misclass <- as.data.frame(r(misclass_valid_a,
misclass_valid_b,
misclass_valid_c))
validation_misclass <- as.data.frame(row(misclass_valid_a,
misclass_valid_b,
misclass_valid_c))
summary(tree_c) # 0.09362
# Calculating misclassification rate for validation data
misclass_valid_a <- 1-sum(diag(table(pred_a, valid$y)))/length(pred_a)
misclass_valid_b <- 1-sum(diag(table(pred_b, valid$y)))/length(pred_b)
misclass_valid_c <- 1-sum(diag(table(pred_c, valid$y)))/length(pred_c)
misclass_valid_a
as.data.frame(c(misclass_valid_a), c(misclass_valid_b), c(misclass_valid_c))
as.data.frame(c(misclass_valid_a, misclass_valid_b, misclass_valid_c)
as.data.frame(c(misclass_valid_a, misclass_valid_b, misclass_valid_c))
as.data.frame(c(misclass_valid_a, misclass_valid_b, misclass_valid_c))
validation_misclass <- as.data.frame(c(misclass_valid_a, misclass_valid_b, misclass_valid_c))
summary(validation_misclass)
validation_misclass <- as.data.frame(c(misclass_valid_a, misclass_valid_b, misclass_valid_c))
<-
as.data.frame(c(misclass_valid_a, misclass_valid_b, misclass_valid_c))
data.frame(c(misclass_valid_a, misclass_valid_b, misclass_valid_c))
data.frame(a = c(misclass_valid_a),
b = c(misclass_valid_b),
c = c(misclass_valid_c))
data.frame(validation_misclass_a = c(misclass_valid_a),
validation_misclass_b = c(misclass_valid_b),
validation_misclass_c = c(misclass_valid_c))
data.frame(a = misclass_valid_a,
b = misclass_valid_b,
c = misclass_valid_c)
# Summaries to report misclassification rate for trees on train set.
summary_a <- summary(tree_a) # 0.1048
summary_a
summary_a$misclass
summary_a
summary_a$misclass
data.frame(a = misclass_valid_a,
b = misclass_valid_b,
c = misclass_valid_c)
data.frame(a = misclass_valid_a,
b = misclass_valid_b,
c = misclass_valid_c)
# Summaries to report misclassification rate for trees on train set.
summary(tree_a) # 0.1048
summary(tree_b) # 0.1048
summary(tree_c) # 0.09362
# Calculating misclassification rate for validation data
misclass_valid_a <- 1-sum(diag(table(pred_a, valid$y)))/length(pred_a)
misclass_valid_b <- 1-sum(diag(table(pred_b, valid$y)))/length(pred_b)
misclass_valid_c <- 1-sum(diag(table(pred_c, valid$y)))/length(pred_c)
# Print validation misclass
data.frame(a = misclass_valid_a,
b = misclass_valid_b,
c = misclass_valid_c)
# Calculating misclassification rate for validation data
misclass_valid_a <- 1-sum(diag(table(valid$y,pred_a)))/length(pred_a)
source("~/Desktop/Git/github/tdde01/lab2/assigment_2.R")
# Print validation misclass
data.frame(a = misclass_valid_a,
b = misclass_valid_b,
c = misclass_valid_c)
source("~/Desktop/Git/github/tdde01/lab2/assigment_2.R")
?plot
plot(2:50, train_score[2:50], type = "b", col = "red")
source("~/Desktop/Git/github/tdde01/lab2/assigment_2.R")
points(2:50, validation_score[2:50], type = "b", col = "blue")
plot(2:50, train_score[2:50], type = "b", col = "red")
points(2:50, validation_score[2:50], type = "b", col = "blue")
?plot
summary(tree_c) # 0.09362
plot(2:50, train_score[2:50], type = "b", col = "red", ylim = c(0:12000))
plot(2:50, train_score[2:50], type = "b", col = "red", ylim = c(0 : 12000))
points(2:50, validation_score[2:50], type = "b", col = "blue")
plot(2:50, validation_score[2:50], type = "b", col = "blue")
plot(2:50, train_score[2:50], type = "b", col = "red", ylim = c(0 : 12000))
plot(2:50, train_score[2:50], type = "b", col = "red")
plot(2:50, validation_score[2:50], type = "b", col = "blue")
points(2:50, validation_score[2:50], type = "b", col = "blue")
plot(2:50, train_score[2:50], type = "b", col = "red")
points(2:50, validation_score[2:50], type = "b", col = "blue")
plot(2:50, validation_score[2:50], type = "b", col = "blue")
plot(2:50, train_score[2:50], type = "b", col = "red", ylim = c(8000:12000))
plot(2:50, validation_score[2:50], type = "b", col = "blue")
plot(2:50, train_score[2:50], type = "b", col = "red", ylim = c(8000:10000))
plot(2:50, validation_score[2:50], type = "b", col = "blue")
plot(2:50, train_score[2:50], type = "b", col = "red", ylim = c(8000,12000))
plot(2:50, validation_score[2:50], type = "b", col = "blue")
plot(2:50, train_score[2:50], type = "b", col = "red", ylim = c(8000,12000))
points(2:50, validation_score[2:50], type = "b", col = "blue")
plot(2:50, train_score[2:50], type = "b", col = "red", ylim = c(8000,12000),
ylab = "Deviance", xlab = "Number of leaves")
points(2:50, validation_score[2:50], type = "b", col = "blue")
?plot
plot(2:50, train_score[2:50], type = "b", col = "red", ylim = c(8000,12000),
main = "Optimal tree depth based on training and validation data"
, ylab = "Deviance", xlab = "Number of leaves")
points(2:50, validation_score[2:50], type = "b", col = "blue")
plot(2:50, train_score[2:50], type = "b", col = "red", ylim = c(8000,12000),
main = "Optimal tree depth", ylab = "Deviance", xlab = "Number of leaves")
points(2:50, validation_score[2:50], type = "b", col = "blue")
legend("topright", c("test data", "validation data"), fill = ("red", "blue"))
source("~/Desktop/Git/github/tdde01/lab2/assigment_2.R")
styler:::style_active_file()
lintr:::addin_lint()
source("~/Desktop/Git/github/tdde01/lab2/assigment_2.R")
source("~/Desktop/Git/github/tdde01/lab2/assigment_2.R")
source("~/Desktop/Git/github/tdde01/lab2/assigment_2.R")
data.frame(train = opt_train,
valid = opt_valid)
source("~/Desktop/Git/github/tdde01/lab2/assigment_2.R")
data.frame(train = opt_train,
valid = opt_valid)
train_score
opt_train
source("~/Desktop/Git/github/tdde01/lab2/assigment_2.R")
source("~/Desktop/Git/github/tdde01/lab2/assigment_2.R")
data.frame(train = opt_train,
valid = opt_valid)
opt_train
train_score
source("~/Desktop/Git/github/tdde01/lab2/assigment_2.R")
opt_train <- which.min(train_score[-0])
opt_train
train_score[-1]
train_score
source("~/Desktop/Git/github/tdde01/lab2/assigment_2.R")
data.frame(train = opt_train,
valid = opt_valid)
data.frame(train = opt_train,
valid = opt_valid)
data.frame(train = opt_train + 1,
valid = opt_valid + 1)
opt_tree <- prune.tree(tree_c, best = 22)
# tree structure with optimal number of leaves
plot(opt_tree)
text(opt_tree, pretty = 1)
source("~/Desktop/Git/github/tdde01/lab2/assigment_2.R")
# tree structure with optimal number of leaves
plot(opt_tree, main = "visualization of tree with optimal depth")
# tree structure with optimal number of leaves
plot(opt_tree, main = "visualization of tree with optimal depth")
source("~/Desktop/Git/github/tdde01/lab2/assigment_2.R")
# tree structure with optimal number of leaves
plot(opt_tree)
opt_tree
# visualization of tree structure with optimal number of leaves
plot(opt_tree)
opt_tree
source("~/Desktop/Git/github/tdde01/lab2/assigment_2.R")
pred_test <- predict(opt_tree, newdata = test, type = "class")
confusion_matrix <- table(test$y, pred_test)
confusion_matrix
summary(opt_tree)
confusion_matrix <- table(pred_test, test$y)
confusion_matrix
test$y
pred_test
test$y
misclass_valid_c2 <- mean(pred_c!=valid$y)
mean(pred_c!=valid$y)
# Print validation misclass
data.frame(
a = misclass_valid_a,
b = misclass_valid_b,
c = misclass_valid_c
)
# Calculating misclassification rate for validation data
misclass_valid_b <- mean(pred_a != valid$y)
misclass_valid_b <- mean(pred_b != valid$y)
misclass_valid_c <- mean(pred_c!=valid$y)
# Print validation misclass
data.frame(
a = misclass_valid_a,
b = misclass_valid_b,
c = misclass_valid_c
)
confusion_matrix <- t(table(test$y, pred_test))
confusion_matrix
t(confusion_matrix)
confusion_matrix <- table(test$y, pred_test)
t(confusion_matrix)
confusion_matrix
library(MLmetrics)
install.packages("MLmetrics")
install.packages("MLmetrics")
library(MLmetrics)
#     no      yes
# no  11872   107
# yes  1371   214
Accuracy(pred_test, test$y)
confusion_matrix <- table(pred_test, test$y)
confusion_matrix
?F1_Score
F1_Score(test$y, pred_test)
?tree
source("~/Desktop/Git/github/tdde01/lab2/assigment_1.R")
source("~/Desktop/Git/github/tdde01/lab2/assigment_2.R")
# Summaries to report misclassification rate for trees on train set.
summary(tree_a) # 0.1048
summary(tree_b) # 0.1048
summary(tree_c) # 0.09362
# Calculating misclassification rate for validation data
misclass_valid_a <- mean(pred_a != valid$y)
misclass_valid_b <- mean(pred_b != valid$y)
misclass_valid_c <- mean(pred_c != valid$y)
# Print validation misclass
data.frame(
a = misclass_valid_a,
b = misclass_valid_b,
c = misclass_valid_c
)
# Summaries to report misclassification rate for trees on train set.
summary(tree_a) # 0.1048
summary(tree_b) # 0.1048
summary(tree_c) # 0.09362
# Calculating misclassification rate for validation data
misclass_valid_a <- mean(pred_a != valid$y)
misclass_valid_b <- mean(pred_b != valid$y)
misclass_valid_c <- mean(pred_c != valid$y)
# Print validation misclass
data.frame(
a = misclass_valid_a,
b = misclass_valid_b,
c = misclass_valid_c
)
install.packages("raport")
install.packages("rport")
install.packages("rpart")
install.packages("rpart")
installed.packages(rpart.plot)
# Summaries to report misclassification rate for trees on train set.
summary(tree_a) # 0.1048
summary(tree_b) # 0.1048
# Summaries to report misclassification rate for trees on train set.
summary(tree_a) # 0.1048
summary(tree_b) # 0.1048
source("~/Desktop/Git/github/tdde01/lab2/assigment_2.R")
# Summaries to report misclassification rate for trees on train set.
summary(tree_a) # 0.1048
plot(tree_a)
plot(tree_b)
tree_a
tree_c
loss_matrix <- matrix(c(0, 1, 5, 0), nrow = 2)
loss_matrix
tree_a
View(data)
text(tree_a)
fit <- rpart(y ~ ., data = test, method = "class",
parms = list(loss = loss_matrix))
rpart.plot(fit, type = "class")
rpart.plot(fit, type = "class")
library(rpart.plot)
rpart.plot(fit, type = "class")
plot(fit)
rpart.plot(fit)
rpart.plot(fit, type = "class")
